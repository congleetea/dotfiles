" =============== MAIN CONFIGURATION ======================
set nocompatible                     "Don't keep compatibility with VI
set modifiable
set fileformat=unix
set number                           "Show line number
set showcmd                          "Show incomplete cmds down the bottom
set showmode                         "Show current mode down the bottom
set encoding=utf-8                   "Force UTF-8 encoding for special characters
set tabstop=2
set shiftwidth=2
set hidden
set autoread
set ruler
set autoindent
set foldenable
set showmatch
set hlsearch
set incsearch                        "搜索时高亮显示搜索结果
set ignorecase                       "搜索时忽略大小写
set smartcase                        "如果同时打开了ignorecase，那么对于只有一个大写字母的搜索词，将大小写敏感；其他情况都是大小写不敏感。
set noswapfile                       "打开文件时不额外创建备份文件.x.swp。
set undofile                         "保留撤销历史,文件关闭后还可以使用历史操作.
set backupdir=~/.vim/.backup//
set directory=~/.vim/.swp//
set undodir=~/.vim/.undo//
set history=1000
set wildmenu
set wildmode=longest:list,full
set laststatus=2
" set iskeyword=a-z,A-Z                "修改单词的定义方式，默认字母，数字和下划线组合都是单词
set clipboard=unnamedplus            "剪切板
syntax on
syntax on                    " 开启文件类型侦测
filetype indent on           " 针对不同的文件类型采用不同的缩进格式
filetype plugin on           " 针对不同的文件类型加载对应的插件
filetype plugin indent on    " 启用自动补全
let mapleader=","

" ===================== Plugins=============================
call plug#begin()
Plug 'preservim/NERDTree'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'
Plug 'ycm-core/YouCompleteMe'
Plug 'congleetea/vim-ros-ycm'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'rhysd/vim-clang-format'
Plug 'preservim/nerdcommenter'
Plug 'congleetea/gtags-vim'
Plug 'airblade/vim-gitgutter'                    " 版本控制插件(显示git,svn等修改信息)
Plug 'jesseleite/vim-agriculture'
Plug 'tpope/vim-projectionist'                   "project config
Plug 'SirVer/ultisnips'
Plug 'taketwo/vim-ros'
Plug 'tpope/vim-surround'
Plug 'Chiel92/vim-autoformat'                    "代码格式化
Plug 'easymotion/vim-easymotion'                 "快速移动
call plug#end()

" ===================== Theme ==============================
set t_Co=256
let g:airline#extensions#tabline#enabled=1    "开启 tab 栏
let g:airline_theme='molokai'
let g:AutoPairs = {'(':')', '[':']', '{':'}', "'":"'", '"':'"', '#include <':'>'}

" ===================== Shortcut ==========================
" <C+w>h/l/j/k 表示多窗口左右上下切换.
" sp,vs 表示水平分割窗口和垂直分割窗口。
nmap <leader>o <C-w>o       "关闭其他窗口,只保留鼠标所在的窗口
nmap <leader>D <C-w>c       "关闭当前窗口
nnoremap <leader>d :bp<CR>  "关闭当前缓冲buffer
nmap <C-x>3 <C-w>v           "打开一个垂直窗口
nmap <C-x>4 <C-w>s           "打开一个水平窗口
nmap <C-w-=> <C-w-+>
imap <C-b> <Left>
imap <C-f> <Right>
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
autocmd BufWritePre * :%s/\s\+$//e                   "保存的时候删除尾部空格.
nnoremap <leader>S :%s/\s\+$//e<CR>                  "<leader>S删除尾部空格
nnoremap <leader>z :exe 'Ag!' expand('<cword>')<cr>  "在工程中查询鼠标处单词

"===================== NERDTree ===========================
" 在tree界面按m可以出现新建、删除、修改文件等操作.
nnoremap <leader>nt :NERDTreeToggle<CR>
nnoremap <leader>nf :NERDTreeFind<CR>                "查看当前目录所在位置，或者显示上一层目录.

" ===================== fzf ================================
nnoremap <leader>hp :Files<CR>
nnoremap <leader>b :Buffers<CR>


" ===================== GIT ===============================

" ===================== Comment/Uncomment ==================
" Create default mappings
let g:NERDCreateDefaultMappings = 1

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1


" ===================== C++ ================================
let g:ycm_server_python_interpreter='/usr/bin/python3'
let g:ycm_global_ycm_extra_conf='~/.vim/plugged/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'

" ===================== C++ astyle ==============================
let g:formatdef_astyle_cpp = '"astyle --options=$HOME/gitlab/dotfiles/configs/astylerc"'
let g:formatters_cpp = ['astyle_cpp']
noremap <leader>ai :Autoformat<CR>
" au BufWrite * :Autoformat

" =================Auto generate file header comment ======
autocmd BufNewFile *.cpp exec ":call SetTitle()"
func SetTitle()
	call setline(1,"/**")
	call append(line("."), " *   Copyright (C) ".strftime("%Y")." All rights reserved.")
	call append(line(".")+1, " *")
	call append(line(".")+2, " *   FileName      ：".expand("%:t"))
	call append(line(".")+3, " *   Author        ：vimjc.com")
	call append(line(".")+4, " *   Email         ：admin@vimjc.com")
	call append(line(".")+5, " *   Date          ：".strftime("%Y年%m月%d日"))
	call append(line(".")+6, " *   Description   ：")
	call append(line(".")+7, " */")
endfunc
"自动将光标定位到末尾"
autocmd BufNewFile * normal G

" ===================== Tags ==============================
set cscopetag                             " 使用 cscope 作为 tags 命令
set cscopeprg='gtags-cscope'              " 使用 gtags-cscope 代替 cscope
let GtagsCscope_Auto_Load = 1
let CtagsCscope_Auto_Map = 1
let GtagsCscope_Quiet = 1
let gtags_file=findfile("GTAGS", ";")     " 查找 gtags 文件
if !empty(gtags_file)
	exe "cs add" gtags_file
endif
" set cscopequickfix=s-,g-,c-,d-,i-,t-,e-
function! UpdateGtags()
	let curdir=getcwd()
	while !filereadable("./GTAGS")
		cd ..
		if getcwd() == "/"
			break
		endif
	endwhile
	if filewritable("GTAGS")
		let cmd = 'gtags'
		let resp = system(cmd)
	endif
	execute ":cd " . curdir
endfunction
map <leader>t :call UpdateGtags()<CR>
" autocmd BufWritePost *.cpp,*.h,*.c,*.cc call UpdateGtags()
let Cscope_OpenQuickfixWindow = 1

" ===================== Snippets ==============================
let g:UltiSnipsExpandTrigger = "<leader>k"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<c-j>"

" ===================== Snippets ==============================
let g:ycm_semantic_triggers = {
			\   'roslaunch' : ['="', '$(', '/'],
			\   'rosmsg,rossrv,rosaction' : ['re!^', '/'],
			\ }


" ===================== EasyMotion ==============================
" s{char}{char} to move to {char}{char}
nmap <Leader>. <Plug>(easymotion-overwin-f2)
" Move to line
map <Leader>l <Plug>(easymotion-bd-jk)
